---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: crowdsec
  namespace: security
spec:
  interval: 5m
  chart:
    spec:
      chart: crowdsec
      version: 0.9.7
      sourceRef:
        kind: HelmRepository
        name: crowdsec-charts
        namespace: flux-system
      interval: 10m
  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace
  test:
    enable: true
  rollback:
    recreate: true
    force: true
    cleanupOnFail: true
  uninstall:
    keepHistory: false
  maxHistory: 3
  values:
    container_runtime: containerd
    # config:
    #   notifications:
    #     type: http # Don't change
    #     name: http_default # Must match the registered plugin in the profile

    #     # One of "trace", "debug", "info", "warn", "error", "off"
    #     log_level: info

    #     # group_wait:         # Time to wait collecting alerts before relaying a message to this plugin, eg "30s"
    #     # group_threshold:    # Amount of alerts that triggers a message before <group_wait> has expired, eg "10"
    #     # max_retry:          # Number of attempts to relay messages to plugins in case of error
    #     # timeout:            # Time to wait for response from the plugin before considering the attempt a failure, eg "10s"

    #     #-------------------------
    #     # plugin-specific options

    #     # The following template receives a list of models.Alert objects
    #     # The output goes in the http request body
    #     format: |
    #       {
    #       "token": "${SECRET_ALERTMANAGER_PUSHOVER_TOKEN}",
    #       "user": "${SECRET_ALERTMANAGER_PUSHOVER_USER_KEY}",
    #       "message": "{{range . -}}{{$alert := . -}}{{range .Decisions -}}<b>{{.Value}}</b> will get <b>{{.Type}}</b> for next <b>{{.Duration}}</b> for triggering <b>{{.Scenario}}</b>.\r\n https://www.shodan.io/host/{{.Value}}{{end -}}{{end -}}",
    #       "html": "1",
    #       "title": "Scenario triggered on IDS/IPS !"
    #       }
    #     url: https://api.pushover.net/1/messages.json
    #     method: POST
    #     headers:
    #       Content-Type: "application/json"
    tls:
      enabled: true
      caBundle: true
      insecureSkipVerify: false
      certManager:
        enabled: true
      bouncer:
        secret: "{{ .Release.Name }}-bouncer-tls"
        reflector:
          namespaces: []
      agent:
        tlsClientAuth: true
        secret: "{{ .Release.Name }}-agent-tls"
        reflector:
          namespaces: []
      lapi:
        secret: "{{ .Release.Name }}-lapi-tls"
    lapi:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      resources:
        limits:
          memory: 1Gi
        requests:
          cpu: 150m
          memory: 100Mi
      dashboard:
        enabled: false
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      # persistentVolume:
      #   data:
      #     enabled: false
      #     accessModes:
      #       - ReadWriteOnce
      #     storageClassName: "csi-rbd-sc"
      #     size: 1Gi
      #   config:
      #     enabled: false
      #     accessModes:
      #       - ReadWriteOnce
      #     storageClassName: "csi-rbd-sc"
      #     size: 100Mi
      env:
        - name: ENROLL_KEY
          value: "${SECRET_CROWDSEC_ENROLL_KEY}"
        - name: ENROLL_INSTANCE_NAME
          value: "k8s"
        - name: ENROLL_TAGS
          value: "k8s linux nginx authelia paperless"
        - name: DISABLE_ONLINE_API
          value: "false"
    agent:
      acquisition:
        - namespace: networking
          podName: nginx-*
          program: nginx
        - namespace: selfhosted
          podName: paperless-0*
          program: Paperless-ngx
        - namespace: security
          podName: authelia-*
          program: authelia
      env:
        - name: COLLECTIONS
          value: "crowdsecurity/nginx andreasbrett/paperless-ngx LePresidente/authelia"
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      resources:
        limits:
          memory: 512Mi
        requests:
          cpu: 150m
          memory: 100Mi
